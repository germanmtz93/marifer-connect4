# -*- coding: utf-8 -*-
"""checking.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_8JBok5zai-AFwTO7-b5glimbl9iVqaO
"""

import anvil.server
import tensorflow as tf
import numpy as np

# Connect to Anvil
anvil.server.connect("server_FGZJLI5RWO4SPZ4E6AOQHAWF-S7P5DSCEQSQX5CP5")


cnn_model = tf.keras.models.load_model("./cnn_67.h5")
transformer_model = tf.keras.models.load_model("./transformer_47.h5") # Update with the actual Transformer model path

@anvil.server.callable
def get_ai_move(board_state, model_choice="CNN"):
    'Gets the AI move based on the selected model (CNN or Transformer)'

    board_state = np.array(board_state)  # Convert list to numpy array

    # Ensure correct shape based on model
    if model_choice == "Transformer":
        board_state = board_state.reshape(1, 42)  # Flatten for Transformer
    else:
        board_state = board_state.reshape(1, 6, 7, 1)  # Keep CNN shape

    # Choose model and make a prediction
    if model_choice == "CNN":
        prediction = cnn_model.predict(board_state)[0]  # CNN Prediction
    elif model_choice == "Transformer":
        prediction = transformer_model.predict(board_state)[0]  # Transformer Prediction
    else:
        raise ValueError(f"Unknown model choice: {model_choice}")

    sorted_columns = np.argsort(prediction)[::-1]  # Sort columns by probability

    # Debugging: Print predictions and chosen move
    print(f"Model: {model_choice}")
    print(f"Prediction scores: {prediction}")
    print(f"Sorted column choices: {sorted_columns}")

    # Find the first valid column
    for col in sorted_columns:
        for row in range(5, -1, -1):  # Check from bottom row up
            if board_state.shape == (1, 6, 7, 1):  # CNN format
                if board_state[0, row, col, 0] == 0:  # Empty slot found
                    print(f"AI chooses column: {col}")
                    return col
            else:  # Transformer format
                board_reshaped = np.array(board_state).reshape(6, 7)  # Reshape back to 6x7
                if board_reshaped[row, col] == 0:  # Empty slot found
                    print(f"AI chooses column: {col}")
                    return col

    return int(np.argmax(prediction))  # Default to highest probability column

print("Jupyter Notebook is connected to Anvil!")
anvil.server.wait_forever()